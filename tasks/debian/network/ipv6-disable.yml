---
- name: "Disabling IPv6 via kernel parameters"
  ansible.builtin.replace:
    path: "/etc/default/grub"
    regexp: '^GRUB_CMDLINE_LINUX="(.*)(?<!ipv6\.disable=1)"$'
    replace: 'GRUB_CMDLINE_LINUX="\1 ipv6.disable=1"'
  register: "grub_updated"
  notify: "Update Grub"

- name: "Copying IPv6 disable configuration to sysctl"
  ansible.builtin.copy:
    src: "disable-ipv6.conf"
    dest: "/etc/sysctl.d/disable-ipv6.conf"
    mode: "0644"
  register: "sysctl_updated"
  notify: "Apply sysctl configuration"

- name: "Commenting out IPv6 entries in /etc/hosts"
  ansible.builtin.replace:
    path: "/etc/hosts"
    regexp: '^([^#\n]*[:]{2}.*)$'
    replace: '#\1'

- name: "Populating service facts"
  ansible.builtin.service_facts:

- name: "Getting active network connection name"
  ansible.builtin.command: "/usr/bin/nmcli -t -f NAME c show --active"
  register: "active_connections"
  failed_when: false
  changed_when: false

- name: "Disabling IPv6 in NetworkManager"
  when:
    - ansible_facts.services["NetworkManager.service"] is defined
    - ansible_facts.services["NetworkManager.service"].state == "running"
    - active_connections.stdout_lines | default([]) | length > 0
    # Disable IPv6 for all active connections except loopback.
    - item != "lo"
  community.general.nmcli:
    conn_name: "{{ item }}"
    type: "ethernet"
    method6: "disabled"
    state: "present"
  loop: "{{ active_connections.stdout_lines | default([]) }}"
  notify: "Restart network"

- name: "Force all notified handlers to run at this point"
  ansible.builtin.meta: "flush_handlers"
